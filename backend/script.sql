-- Active: 1733800106983@@127.0.0.1@5432@beta_fund
DROP TABLE IF EXISTS LETTER;
DROP TABLE IF EXISTS ANNUAL_REPORT;
DROP TABLE IF EXISTS DONOR;
DROP TABLE IF EXISTS EMPLOYER;
DROP TABLE IF EXISTS DONOR_CIRCLE;
DROP TABLE IF EXISTS "CLASS";
DROP TABLE IF EXISTS "class";
DROP TABLE IF EXISTS CLASS_COORDINATOR;
DROP TABLE IF EXISTS DONOR_ASSIGNMENT;
DROP TABLE IF EXISTS DONATION;
DROP TABLE IF EXISTS PHONOTHON;
DROP TABLE IF EXISTS DONATION;
DROP TABLE IF EXISTS "EVENT";
DROP TABLE IF EXISTS "event";
DROP TABLE IF EXISTS PAYMENT;
DROP TABLE IF EXISTS MATCHING_GIFT;
DROP TABLE IF EXISTS MATCHING_TABLE;

CREATE TABLE DONOR (
    DonorID SERIAL PRIMARY KEY,
    FirstName TEXT,
    LastName TEXT,
    PhoneNumber TEXT,
    Email TEXT,
    Category TEXT CHECK (Category IN ('Alumni', 'Parent', 'Family', 'Faculty', 'Student', 'Other'))
);

-- The LETTER table now includes the DonorID column to reference the DONOR table
CREATE TABLE LETTER (
    LetterID SERIAL PRIMARY KEY,
    LetterType TEXT,
    LetterDate TEXT,
    DonorID INTEGER,
    FOREIGN KEY (DonorID) REFERENCES DONOR(DonorID)
);

CREATE TABLE DONOR_CIRCLE (
    CircleID SERIAL PRIMARY KEY,
    CircleName TEXT,
    MinAmount NUMERIC(10, 2),
    MaxAmount NUMERIC(10, 2),
    DonorID INTEGER,
    Foreign KEY (DonorID) REFERENCES Donor(DonorID)
)

CREATE TABLE "class" (
    ClassID SERIAL PRIMARY KEY,
    ClassYear INTEGER, 
    Foreign KEY (DonorID) REFERENCES Donor(DonorID)
);

CREATE TABLE  DONATION (
    DonationID SERIAL PRIMARY KEY,
    Amount NUMERIC(10, 2),
    "Date" TEXT,
    Pledge NUMERIC(10, 2),
    MatchingGiftEligible BOOLEAN,
    DonorID INTEGER,
    Foreign KEY (DonorID) REFERENCES Donor(DonorID)
)

CREATE TABLE PAYMENT (
    PaymentID TEXT PRIMARY KEY,
    PaymentMethod TEXT CHECK (PaymentMethod IN ('Check', 'Credit Card', 'Deferred'))
)

CREATE TABLE MATCHING_GIFT (
    MatchingGiftID SERIAL PRIMARY KEY,
    Amount FLOAT
)

CREATE TABLE EMPLOYER (
    EmployerID SERIAL PRIMARY KEY,
    EmployerName TEXT
)

CREATE TABLE "class" (
    ClassID SERIAL PRIMARY KEY,
    ClassYear INTEGER
);

CREATE TABLE PHONOTHON (
    PhonothonID SERIAL PRIMARY KEY,
    PhonothonYear INTEGER,
    PhonothonDate DATE
);

CREATE TABLE "event" (
    EventID SERIAL PRIMARY KEY,
    EventName TEXT,
    EventDate DATE,
    EventLocation TEXT
)

